#!/usr/bin/python
# penthesilea.conf

# Penthesilea produces a hit collection starting from PMAPS. Since it
# also applies a selection to PMAPS it takes the parameters of
# s12_selector.

#include('$ICDIR/config/hit_city.conf')
#include('$ICDIR/config/s12_selector.conf')

# override the default input/output files:
files_in = '{filein}'
file_out = '{fileout}'
#nmax =  100000

# max number of events to run
event_range = all,

drift_v = 1 * mm / mus # Expected drift velocity

s1_nmin     =    1
s1_nmax     =    1
s1_emin     =   40 * pes # Min S1 energy integral
s1_emax     = 1e+6 * pes # Max S1 energy integral
s1_wmin     =  175 * ns # min width for S1
s1_wmax     =  1.e6 * ns # Max width
s1_hmin     =    0 * pes # Min S1 height
s1_hmax     = 1e+6 * pes # Max S1 height
s1_ethr     =  0.5 * pes # Energy threshold for S1

s2_nmin     =     1
s2_nmax     =     100       # Max number of S2 signals
s2_emin     =     0 * pes # Min S2 energy integral
s2_emax     =  1e+8 * pes # Max S2 energy integral in pes
s2_wmin     =     2.5 * mus # Min width
s2_wmax     =    10 * ms  # Max width
s2_hmin     =     0 * pes # Min S2 height
s2_hmax     =  1e+6 * pes # Max S2 height
s2_nsipmmin =     1       # Min number of SiPMs touched
s2_nsipmmax =   2000       # Max number of SiPMs touched
s2_ethr     =     0. * pes # Energy threshold for S2

# override hit_collection parameters

rebin = 2  # if set to 1 no rebin is set to n rebin n times the wfm

slice_reco_params = dict(
  Qthr            =  5 * pes,
  Qlm             =  5 * pes,
  lm_radius       =  0 * mm ,
  new_lm_radius   =  0 * mm ,
  msipm = 1 )


global_reco_params = dict(
 Qthr             =  1 * pes,
 Qlm              =  0 * pes,
 lm_radius        = -1 * mm ,
 new_lm_radius    = -1 * mm ,
 msipm            =  1      )

##write_mc_info = False
