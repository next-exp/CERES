# set_input_files
files_in = '{filein}'
file_out = '{fileout}'

# compression library
compression = 'ZLIB4'

# run number 0 is for MC
run_number = {run}
detector_db = 'demopp'

# How frequently to print events
print_mod = 1000

# max number of events to run
event_range = all,
verbosity = 0

drift_v = 1. * mm / mus # Expected drift velocity

s1_nmin     =    1
s1_nmax     =    1
s1_emin     =    0 * pes # Min S1 energy integral
s1_emax     = 1e+6 * pes # Max S1 energy integral
s1_wmin     =  1 * ns # min width for S1
s1_wmax     =  1.e6 * ns # Max width
s1_hmin     =    0 * pes # Min S1 height
s1_hmax     = 1e+6 * pes # Max S1 height
s1_ethr     =  0.5 * pes # Energy threshold for S1

s2_nmin     =     1
s2_nmax     =     100       # Max number of S2 signals
s2_emin     =     0 * pes # Min S2 energy integral
s2_emax     =  1e+6 * pes # Max S2 energy integral in pes
s2_wmin     =     3 * mus # Min width
s2_wmax     =    10 * ms  # Max width
s2_hmin     =     0 * pes # Min S2 height
s2_hmax     =  1e+6 * pes # Max S2 height
s2_nsipmmin =     1       # Min number of SiPMs touched
s2_nsipmmax =   2000       # Max number of SiPMs touched
s2_ethr     =     0. * pes # Energy threshold for S2
# override the default input/output files:

# override hit_collection parameters

#write_mc_info = True
rebin =10000  # if set to 1 no rebin is set to n rebin n times the wfm

slice_reco_params = dict(
  Qthr            =  1 * pes,
  Qlm             =  1 * pes,
  lm_radius       =  0 * mm ,
  new_lm_radius   =  0 * mm ,
  msipm           =  1      )


global_reco_params = dict(
  Qthr             =  1 * pes,
  Qlm              =  0 * pes,
  lm_radius        = -1 * mm ,
  new_lm_radius    = -1 * mm ,
  msipm            =  1      )
